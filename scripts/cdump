#!/usr/bin/env python

import pprint
import argparse

import msgpack

from cdump.definitions import Definitions
from cdump.parser import Parser
from cdump.xml_dump import XMLDump


def dump_ast(file_path):
    print(XMLDump.FromFilePath(file_path).as_xml())


def dump_definitions(file_path):
    for definition in Parser(XMLDump.FromFilePath(file_path)):
        print(definition)


def serialize_to_file(mp_file_name, file_paths):
    with open(mp_file_name, 'wb') as fobj:
        for definition in Definitions.FromFilePaths(file_paths):
            msgpack.pack(definition.to_dict(), fobj, use_bin_type=True)


def deserialize_from_file(file_path):
    with open(file_path, 'rb') as fobj:
        unpacker = msgpack.Unpacker(fobj, raw=False)
        for definition in unpacker:
            pprint.pprint(definition)


def main():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest='action')
    dump_subparser = subparsers.add_parser('dump')
    dump_subparser.add_argument('input_file', type=str, help='File to dump')
    parse_subparser = subparsers.add_parser('parse')
    parse_subparser.add_argument('input_file', type=str, help='File to parse')
    serialize_subparser = subparsers.add_parser('serialize')
    serialize_subparser.add_argument(
        '-o', '--output', type=str,
        help='Output for serialized definitions to'
    )
    serialize_subparser.add_argument(
        'input_files', type=str, nargs='+',
        help='Files to process'
    )
    deserialize_subparser = subparsers.add_parser('deserialize')
    deserialize_subparser.add_argument(
        'input_file', type=str,
        help='File to deserialize'
    )

    args = parser.parse_args()

    if args.action == 'dump':
        dump_ast(args.input_file)
    elif args.action == 'parse':
        dump_definitions(args.input_file)
    elif args.action == 'serialize':
        serialize_to_file(args.output, args.input_files)
    elif args.action == 'deserialize':
        deserialize_from_file(args.input_file)


main()

#!/usr/bin/env python

import sys
import json
import pprint
import argparse

import msgpack

from cdump.parser import Parser


def msgpack_packer(cdef, fobj):
    return msgpack.pack(cdef.to_dict(), fobj, use_bin_type=True)


def json_packer(cdef, fobj):
    return json.dump(cdef.to_dict(), fobj, indent=2)


def parse(file_paths, libclang=None):
    parser = Parser(libclang)
    for file_path in file_paths:
        for cdef in parser.parse(file_path):
            pprint.pprint(cdef.to_dict())


def serialize(mp_file_name, file_paths, format='msgpack', libclang=None):
    parser = Parser(libclang)
    pack = json_packer if format == 'json' else msgpack_packer
    mode = 'w' if format == 'json' else 'wb'
    with open(mp_file_name, mode) as fobj:
        for file_path in file_paths:
            for cdef in parser.parse(file_path):
                pack(cdef, fobj)


def deserialize(file_path):
    with open(file_path, 'rb') as fobj:
        unpacker = msgpack.Unpacker(fobj, raw=False)
        for definition in unpacker:
            pprint.pprint(definition)


def main():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest='action')

    parse_subparser = subparsers.add_parser('parse')
    parse_subparser.add_argument(
        'input_files', type=str, nargs='+',
        help='Files to process'
    )
    parse_subparser.add_argument(
        '--libclang', type=str,
        help='Path to libclang library'
    )

    serialize_subparser = subparsers.add_parser('serialize')
    serialize_subparser.add_argument(
        '--format', type=str, default='msgpack',
        help='Format to serialize to, "json" and "msgpack" supported'
    )
    serialize_subparser.add_argument(
        '--libclang', type=str,
        help='Path to libclang library'
    )
    serialize_subparser.add_argument(
        'input_files', type=str, nargs='+',
        help='Files to process'
    )
    serialize_subparser.add_argument(
        '-o', '--output', type=str,
        help='Output for serialized definitions to'
    )

    deserialize_subparser = subparsers.add_parser('deserialize')
    deserialize_subparser.add_argument(
        'input_file', type=str,
        help='File to deserialize'
    )

    args = parser.parse_args()

    if args.action == 'parse':
        parse(args.input_files, args.libclang)
    elif args.action == 'serialize':
        serialize(args.output, args.input_files, args.format, args.libclang)
    elif args.action == 'deserialize':
        deserialize(args.input_file)
    else:
        parser.print_help()
        sys.exit(2)


main()
